require("dotenv").config();
const express = require("express");
const cors = require("cors");

const app = express();
const PORT = process.env.PORT || 8000;

// Middleware
app.use(
  cors({
    origin: process.env.FRONTEND_URL || "http://localhost:3000", // Configure for your frontend URL
    credentials: true,
  })
);
app.use(express.json());

// Chat endpoint
app.post("/api/chat", async (req, res) => {
  try {
    const { contents } = req.body;

    if (!contents || !Array.isArray(contents)) {
      return res
        .status(400)
        .json({ error: "Invalid request: contents array required" });
    }

    // Validate environment variables
    if (!process.env.GEMINI_API_URL || !process.env.GEMINI_API_KEY) {
      console.error(
        "Missing required environment variables: GEMINI_API_URL or GEMINI_API_KEY"
      );
      return res.status(500).json({ error: "Server configuration error" });
    }

    console.log(
      "📤 Sending request to Gemini API with contents count:",
      contents.length
    );
    console.log(
      "🔍 Request contents structure:",
      contents.map((content, index) => ({
        index,
        role: content.role,
        hasText: !!(content.parts && content.parts[0] && content.parts[0].text),
        textLength: content.parts?.[0]?.text?.length || 0,
      }))
    );

    // Call Gemini API
    const response = await fetch(
      `${process.env.GEMINI_API_URL}?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ contents }),
      }
    );

    console.log("📡 Gemini API response status:", response.status);

    const data = await response.json();
    console.log("📥 Gemini API response type:", typeof data);
    console.log("🔍 Gemini API response keys:", Object.keys(data));

    if (!response.ok) {
      console.error("❌ Gemini API error:", data);

      // Extract proper error message
      let errorMessage = "API request failed";

      if (data && typeof data === "object") {
        if (data.error) {
          if (typeof data.error === "string") {
            errorMessage = data.error;
          } else if (data.error.message) {
            errorMessage = data.error.message;
          } else if (data.error.details) {
            errorMessage = data.error.details;
          } else {
            errorMessage = `API Error: ${JSON.stringify(data.error)}`;
          }
        } else if (data.message) {
          errorMessage = data.message;
        }
      }

      return res.status(response.status).json({
        error: errorMessage,
      });
    }

    // Validate response structure before sending
    if (!data || typeof data !== "object") {
      console.error("❌ Invalid response format: not an object");
      return res.status(500).json({
        error: "Invalid response format from AI service",
      });
    }

    if (!data.candidates || !Array.isArray(data.candidates)) {
      console.error("❌ Invalid response format: no candidates array");
      return res.status(500).json({
        error: "Invalid response format: missing candidates",
      });
    }

    if (data.candidates.length === 0) {
      console.error("❌ No candidates in response");
      return res.status(500).json({
        error: "No response generated by AI service",
      });
    }

    if (!data.candidates[0] || !data.candidates[0].content) {
      console.error("❌ Invalid candidate structure");
      return res.status(500).json({
        error: "Invalid response structure from AI service",
      });
    }

    console.log("✅ Gemini API response received successfully");
    console.log("🔍 Response structure valid:", {
      hasCandidates: !!data.candidates,
      candidatesCount: data.candidates.length,
      hasContent: !!(data.candidates[0] && data.candidates[0].content),
      hasParts: !!(
        data.candidates[0] &&
        data.candidates[0].content &&
        data.candidates[0].content.parts
      ),
    });

    res.json(data);
  } catch (error) {
    console.error("💥 Chat API error:", error);
    console.error("💥 Error type:", typeof error);
    console.error("💥 Error name:", error.name);
    console.error("💥 Error message:", error.message);

    // Return a proper error message
    let errorMessage = "Internal server error";
    if (error.message) {
      errorMessage = error.message;
    } else if (typeof error === "string") {
      errorMessage = error;
    }

    res.status(500).json({ error: errorMessage });
  }
});

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({ status: "OK", timestamp: new Date().toISOString() });
});

// Serve static files in production
if (process.env.NODE_ENV === "production") {
  const path = require("path");
  app.use(express.static("build"));

  app.get("*", (req, res) => {
    res.sendFile(path.join(__dirname, "build", "index.html"));
  });
}

// Start server
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`💚 Health check available at http://localhost:${PORT}/health`);
  console.log(`💬 Chat API available at http://localhost:${PORT}/api/chat`);
  console.log(`🔑 API configured: ${!!process.env.GEMINI_API_KEY}`);
  console.log(`🌐 API URL configured: ${!!process.env.GEMINI_API_URL}`);
});
